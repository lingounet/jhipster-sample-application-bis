

entity Aml {
	name String   
}

enum Status {
	DRAFT, SECURITY_INTERVIEW, RISK_ANALYSIS, COMPLIANCE_CHECK, DONE
}

enum Criticality {
	LOW, MODERATE, HIGH, CRITICAL
}

enum Process {
	LIGHT, CLASSIC
}


entity ApplicationType {
	name String
}

entity HostingType {
	name String
}

entity HostingPlatform {
	name String
}

entity PersonalDataRegion {
	name String
}

entity PersonalDataType {
	name String
}

entity IcrfStatus {
	name String
}

entity Icrf {
	code String
    description String
}

entity SensitiveDataType {
	name String
}

//==============================

entity Psat {
	amlId String required
    owner String  required
    status Status required
}

entity SecurityInterview {
	applicationName String required
    so String required
    process Process
}

entity Hosting {
	date Instant
}

entity PersonalData {
	date Instant
}

entity SensitiveData {
	date Instant
}

entity Availability {
	financial Criticality
    legal Criticality
    image Criticality
    strategy Criticality
    operational Criticality
    traceability Blob
    confidentiality Blob
    integrity Blob
    critical Boolean
}

entity ComplementaryQuestion {
	internet Boolean
    development Boolean
    configuration Boolean
    cloud Boolean
    internal Boolean
    partner Boolean
    users Integer
}

relationship OneToOne {
	SecurityInterview to Psat
    ApplicationType to SecurityInterview
    Icrf to IcrfStatus
    SecurityInterview to Availability
}

relationship OneToMany {
	HostingType to HostingPlatform{hostingType}
    PersonalDataRegion to PersonalDataType{personalDataRegion}
    
    HostingPlatform to Hosting{hostingPlaform}
    PersonalDataType to PersonalData{personalDataType}
    SensitiveDataType to SensitiveData{sensitiveDataType}
    
    SecurityInterview to Hosting{securityInterview}
    SecurityInterview to PersonalData{securityInterview}
    SecurityInterview to Icrf{securityInterview}
    SecurityInterview to SensitiveData{securityInterview}
    SecurityInterview to ComplementaryQuestion{securityInterview}
}

service * with serviceClass